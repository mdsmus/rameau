(in-package :rameau)

(enable-sharp-l-syntax)

(defstruct analysis
  segments results answer-sheet file-name notes dur size-answer-sheet
  number-algorithms ast full-path algorithms title)

(defun main-perform-analysis :private (segments options alg)
  (safe-with-backtrace (:condition  (arg :debug options)
                        :print-error-msg (format t "Analysis failed for algorithm ~a. Please report a bug.~%" alg))
    (perform-analysis segments options alg)))

(defun main-perform-functional-analysis :private (segments options alg)
  (safe-with-backtrace (:condition  (arg :debug options)
                        :print-error-msg (format t "Functional analysis failed for algorithm ~a. Please report a bug.~%" alg))
    (functional-analysis segments options alg)))

(defun main-parse-file :private (file options)
  (safe-with-backtrace (:condition (arg :debug options)
                        :print-error-msg (format t "Could not parse file ~a.
Please check with lilypond to see if it is valid. If it is, please report a bug.~%" file)
                        :exit t)
     (parse-file file)))

(defun all-chords-single (options anal)
  (declare (ignore options))
  (iter (for chord in (first (analysis-results anal)))
        (for segment in (analysis-segments anal))
        (for i from 0)
        (collect (list chord segment (analysis-file-name anal) i))))

(defun make-result-list :private (analysis)
  (apply #'mapcar #'list (analysis-results analysis)))

(defun analyse-files (options)
  (setf (arg :algorithms options) (mapcar #'load-alg (filter-algorithms (arg :algorithms options) *algorithms*))
        (arg :options options) (process-option-list (arg :options options)))
  (let (last-file)
    (safe-with-backtrace (:condition (arg :debug options)
                          :print-error-msg (format t "Could not analyse ~a.~%" last-file)
                          :exit t)
      (iter (for file in (arg :files options))
            (setf last-file file)
            (for segments = (sonorities (main-parse-file file options)))
            (collect (make-analysis :segments segments
                                    :results (mapcar #L(main-perform-analysis segments options !1)
                                                     (arg :algorithms options))
                                    :answer-sheet (path-parse-answer-sheet file)
                                    :file-name (pathname-name file)
                                    :number-algorithms (length (arg :algorithms options))
                                    :algorithms (arg :algorithms options)
                                    :notes (mapcar #'list-events segments)
                                    :ast (file-ast file)
                                    :full-path file
                                    :dur (durations segments)))))))

(defun functional-analyse-files (options)
  (setf (arg :algorithms options) (mapcar #'load-alg (filter-algorithms (arg :algorithms options) *functional-algorithms*))
        (arg :options options) (process-option-list (arg :options options)))
  (let (last-file)
    (safe-with-backtrace (:condition (arg :debug options)
                          :print-error-msg (format t "Could not analyse ~a. Error." last-file)
                          :exit t)
      (iter (for file in (arg :files options))
            (for segments = (sonorities (main-parse-file file options)))
            (collect (make-analysis :segments segments
                                    :results (mapcar #L(main-perform-functional-analysis segments options !1)
                                                     (arg :algorithms options))
                                    :answer-sheet (path-parse-functional-answer-sheet file)
                                    :file-name (pathname-name file)
                                    :number-algorithms (length (arg :algorithms options))
                                    :algorithms (arg :algorithms options)
                                    :notes (mapcar #'list-events segments)
                                    :ast (file-ast file)
                                    :full-path file
                                    :dur (durations segments)))))))


(defun analysis-terminal (options analysis)
  (let* ((number-algorithms (analysis-number-algorithms analysis))
         (size-line (hline-size number-algorithms options)))
    (format t "~2%")
    (print-line-term options "#" "notes" "dur" "answer")
    (iter (for algo in (arg :algorithms options))
          (print-chord-column options (alg-name algo)))
    (print-hline-term size-line)
    (iter (with right-answer-list = (make-list number-algorithms :initial-element 0))
          (for note in (analysis-notes analysis))
          (for dur in (analysis-dur analysis))
          (for seg-number from 1)
          (for answer in (analysis-answer-sheet analysis))
          (for result in (make-result-list analysis))
          (for comparison = (mapcar (lambda (x) (compare-answer-sheet x answer)) result))
          (setf right-answer-list (inc-bool-list comparison right-answer-list))
          (print-line-term options seg-number note dur answer)
          (iter (for res in result)
                (for comp in comparison)
                (print-color-terminal res comp options))
          (finally
           (print-hline-term size-line)
           (print-line-term options "#" "notes" "dur" "answer")
           (iter (for algo in (arg :algorithms options))
                 (print-chord-column options (alg-name algo)))
           (print-hline-term size-line)
           (print-footer-term "CORRECT(%)" size-line number-algorithms options)
           (iter (for i in (mapcar (lambda (x) (% x seg-number)) right-answer-list))
                 (print-chord-column options (format nil "~,2f" i)))
           (format t "~%")
           (print-hline-term size-line)
           (format t "~%")))))

(defun analysis-terminal-no-answer (options analysis)
  (let* ((number-algorithms (analysis-number-algorithms analysis))
         (size-line (hline-size number-algorithms options 'no-answer)))
    (format t "~2%")
    (print-line-term options "#" "notes" "dur")
    (iter (for algo in (arg :algorithms options))
          (print-chord-column options (alg-name algo)))
    (print-hline-term size-line)
    (iter (for note in (analysis-notes analysis))
          (for dur in (analysis-dur analysis))
          (for seg-number from 1)
          (for result in (make-result-list analysis))
          (print-line-term options seg-number note dur)
          (iter (for res in result)
                (print-chord-column options res))
          (finally
           (print-hline-term size-line)
           (when (arg :sonorities options)
             (format t "~&TOTAL SONORITIES: ~a~%" seg-number))
           (format t "~%")))))
