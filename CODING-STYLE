; -*- org -*-

* 1. References
** 1.  Norvig and Pitman
   "Tutorial on Good Lisp Programming Style" at
   http://norvig.com/luv-slides.ps.
* 2. Writing code
** 1.  changelog
   We don't write Gnu style ChangeLog. The git log message is our
   changelog. Please write a short message in the first line that
   sumarizes the change in your commit. If you want to give more
   detail, skip a line and describe the changes you made. You can use
   itemization to separate changes. Here is an example of this log
   format:

commit eb3072ce3805da5d5a31ca1ef9984f62f7510aad
Author: Pedro Kroger <pedro.kroger@gmail.com>
Date:   Thu Apr 17 11:53:55 2008 -0300

    translate and (minor) refactor cifras and rename file names
    
    * cifras is now chords.lisp
    * segmento is now segment.lisp
    * uses chord-p instead of chordp
    * fundamental now is root in a chord (to save screen space)
    * compara-gabarito-temperado and compara-gabarito-tonal are merged in a single function compare-answer-sheet
    * functions to print a structure are defined separatelly

** 2.  indentation
   Don't ever NEVER (did I say never?) use tabs to indent expressions.
   Use good old spaces. Make sure you have something like

   (setq indent-tabs-mode nil)

   in your .emacs

   We prefer to use iterate instead of loop, but if you use loop,
   put the following definitions in your .emacs:

   (setq lisp-simple-loop-indentation 1
         lisp-loop-keyword-indentation 6
         lisp-loop-forms-indentation 6)

   Don't forget to use common-lisp indentation in emacs:

   (setq lisp-indent-function 'common-lisp-indent-function)

   We have use a definition of defun that accept keys in the same
   syntax as defmethod (but the keys are different), to indent the
   defuns blocks correctly use the cl-indent.el file in the tools
   directory and load it in your .emacs *before* you load slime.

   Use 'make indent' if you want to re-indent all lisp files at once.
** 3.  spacing
   Use just one blank line between each function definition. There is
   no need to use more space to guide the code. Use things in emacs
   like code navigation, outlining, and narrowing. One of us is
   intolerant to spaces and freak out if there are more spaces or
   blank lines than necessary.
** 4.  package names
   The name of packages should be simple and short. Please, don't use
   java-style foo.bar.bla.org package names.
** 5.  documentation and tests cases
   You don't write code just for yourself, it will be read long after
   you wrote it by others. Write documentation strings to make clean
   what the function does and provide information about the input and
   output. Whatever is possible, write test cases. They serve not only
   to test the program, but as an example of use. In fact, the first
   test is shown in the generated documentation. So, choose a
   representative example as the first testing case. When is
   appropriate, document the type of arguments and output.

   Read the session about documentation in Norvig and Pitman's
   "Tutorial on Good Lisp Programming Style", p. 17.

   In long documents, create headers inside comments to separate the
   document in sections. Outline mode can display just the sections
   make it easy to navigate through the document.

   ;;; Header 1
   .... code ...
   ;;; Header 2

   You can use a few formating commands inside the docstring:

   @rameau
   @var{name}
   @link{name}{url}
   @file{name}
   @function{package}{name}
   @macro{package name}

** 6.  language
   All code, comments and documentation should be in English.
** 7.  comments
   Comments are good, docstrings are better. Write comments for
   anything that is complicated, tricky, or easy to forget (or
   difficult to remember) but is too low level to be in the docstring.
   Don't put your name and date in the comments, although Norvig
   recommends it. We use version control.
** 8.  use short functions
   A function shouldn't be bigger than a page (roughly 35-39 lines). If
   a function is too big you always can abstract it better in smaller
   functions.
** 9.  don't pollute the "global" namespace with one-time functions
   Usually is better to use labels or flet to encapsulate related
   functions in one bigger function.

   [FIXME: cor em labels]
** 10. loops
*** use iterate instead of loop
    There is no harm in using loop, but since we use iterate in so
    many places is good to use iterate only for consistency
*** don't use loop (or iterate) as a shorthand for mapcar
    when mapping a list with a function with more than one argument,
    or that has to do some operation on the argument it is not
    possible to write (mapcar #'bar list); a lambda expression has to
    be used:

    (mapcar (lambda (x) (bar (1+ x))) list)

    Some people prefer to use loop instead of the lambda
    expression:

    (loop for x in list collect (bar (1+ x)))

    In rameau we prefer to use the sharp-L macro:

    (mapcar #L(bar (1+ !1)) list)

    Please always write the #L in uppercase.
*** let inside loop or iterate
    It is better to use the built-in loop and iterate assignment than
    to use a let inside the loop or iterate. The loop and iterate
    assignment aligns better and is simpler to read:

    ;; god
    (iter (for x from 1 to 10)
          (with y = 100)
          (with z = 320)
          (collect (list x y z)))

    ;; bad
    (let ((y 100)
          (z 320))
      (iter (for x from 1 to 10)
            (collect (list x y z))))
** 11. predicates
   Common lisp is not scheme. Write predicates with the termination
   "p" or "-p" and not "?". [We are SICP junkies, so sometimes we may
   be guilty of using "?", but we shuldn't]
* 3. Makefile
** 1.  every thing created automatically must have a target in the makefile to clean it
* 4. Documentation
** 1.  all text files must have a .txt extension
